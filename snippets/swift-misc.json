{
    "Fix Me": {
        "body": [
            "// FIXME: ${description}"
        ],
        "description": "Fix Me (// FIXME: ...) - iOS Snippets",
        "prefix": "fixme"
    },
    "Mark": {
        "body": [
            "// MARK: - ${description}"
        ],
        "description": "Mark (// MARK: - ...) - iOS Snippets",
        "prefix": "mark"
    },
    "Swift API Availability Check Statement": {
        "body": [
            "if #available(${platform name} ${version}, *) {",
            "\t${API available statements}",
            "} else {",
            "\t${fallback statements}",
            "}"
        ],
        "description": "Swift API Availability Check Statement - iOS Snippets",
        "prefix": "available"
    },
    "Swift Closure Expression": {
        "body": [
            "{ (${parameters}) -> ${return type} in",
            "\t${statements}",
            "}"
        ],
        "description": "Swift Closure Expression - iOS Snippets",
        "prefix": "closure"
    },
    "Swift Computed Constant Declaration": {
        "body": [
            "let ${property name}: ${type name} = {",
            "\t${statements}",
            "\treturn ${value}",
            "}()"
        ],
        "description": "Swift Computed Constant Declaration - iOS Snippets",
        "prefix": "let-computed-constant"
    },
    "Swift Computed Variable Get Declaration": {
        "body": [
            "var ${variable name}: ${type} {",
            "\t${statements}",
            "}"
        ],
        "description": "Swift Computed Variable Get Declaration - iOS Snippets",
        "prefix": "var-computed-variable-get"
    },
    "Swift Computed Variable Get and Set Declaration": {
        "body": [
            "var ${variable name}: ${type} {",
            "get {",
            "\t${statements}",
            "}",
            "set {",
            "\t${variable name} = newValue",
            "}",
            "}"
        ],
        "description": "Swift Computed Variable Get and Set Declaration - iOS Snippets",
        "prefix": "var-computed-variable-get-set"
    },
    "Swift Defer Statement": {
        "body": [
            "defer {",
            "\t${deferred statements}",
            "}"
        ],
        "description": "Swift Defer Statement - iOS Snippets",
        "prefix": "defer"
    },
    "Swift Do-Catch Statement": {
        "body": [
            "do {",
            "\ttry ${throwing expression}",
            "} catch ${pattern} {",
            "\t${statements}",
            "}"
        ],
        "description": "Swift Do-Catch Statement - iOS Snippets",
        "prefix": "docatch"
    },
    "Swift For Statement": {
        "body": [
            "for ${item} in ${items} {",
            "\t${code}",
            "}"
        ],
        "description": "Swift For Statement - iOS Snippets",
        "prefix": "for"
    },
    "Swift Function Statement": {
        "body": [
            "func ${name}(${parameters}) -> ${return type} {",
            "\t${function body}",
            "}"
        ],
        "description": "Swift Function Statement - iOS Snippets",
        "prefix": "func"
    },
    "Swift Guard Statement": {
        "body": [
            "guard ${condition} else {",
            "\t${statements}",
            "}"
        ],
        "description": "Swift Guard Statement - iOS Snippets",
        "prefix": "guard"
    },
    "Swift Guard-Let Statement": {
        "body": [
            "guard let ${constant} = ${expression} else { return ${return value} }"
        ],
        "description": "Swift Guard-Let Statement - iOS Snippets",
        "prefix": "guardlet"
    },
    "Swift If Statement": {
        "body": [
            "if ${condition} {",
            "\t${code}",
            "}"
        ],
        "description": "Swift If Statement - iOS Snippets",
        "prefix": "if"
    },
    "Swift If-Else Statement": {
        "body": [
            "if ${condition} {",
            "\t${statementA}",
            "} else {",
            "\t${statementB}",
            "}"
        ],
        "description": "Swift If-Else Statement - iOS Snippets",
        "prefix": "ifelse"
    },
    "Swift If-Let Statement": {
        "body": [
            "if let ${constant name} = ${optional} {",
            "\t${statements}",
            "}"
        ],
        "description": "Swift If-Let Statement - iOS Snippets",
        "prefix": "iflet"
    },
    "Swift Initializer Declaration": {
        "body": [
            "init (${parameters}) {",
            "\t${statements}",
            "}"
        ],
        "description": "Swift Initializer Declaration - iOS Snippets",
        "prefix": "init"
    },
    "Swift Lazy Computed Property Declaration": {
        "body": [
            "lazy var ${property name}: ${type name} = {",
            "\t${statements}",
            "\treturn ${value}",
            "}()"
        ],
        "description": "Swift Lazy Computed Property Declaration - iOS Snippets",
        "prefix": "var-lazy-computed-property"
    },
    "Swift Lazy Stored Variable Declaration": {
        "body": [
            "lazy var ${variable name} = ${expression}"
        ],
        "description": "Swift Lazy Stored Variable Declaration - iOS Snippets",
        "prefix": "var-lazy-variable"
    },
    "Swift Let Declaration": {
        "body": [
            "let ${name} = ${value}"
        ],
        "description": "Swift Let Declaration - iOS Snippets",
        "prefix": "let"
    },
    "Swift Singleton": {
        "body": [
            "static let sharedInstance : ${name} = ${name}()"
        ],
        "description": "Swift Singleton (static let sharedInstance...) - iOS Snippets",
        "prefix": "singleton"
    },
    "Swift Switch Statement": {
        "body": [
            "switch ${value} {",
            "case ${pattern}:",
            "\t${codeA}",
            "default:",
            "\t${codeB}",
            "}"
        ],
        "description": "Swift Switch Statement - iOS Snippets",
        "prefix": "switch"
    },
    "Swift Typealias Declaration": {
        "body": [
            "typealias ${type name} = ${type expression}"
        ],
        "description": "Swift Typealias Declaration - iOS Snippets",
        "prefix": "typealias"
    },
    "Swift Var Declaration": {
        "body": [
            "var ${name} = ${value}"
        ],
        "description": "Swift Var Declaration - iOS Snippets",
        "prefix": "var"
    },
    "Swift While Statement": {
        "body": [
            "while ${condition} {",
            "\t${code}",
            "}"
        ],
        "description": "Swift While Statement - iOS Snippets",
        "prefix": "while"
    },
    "To Do": {
        "body": [
            "// TODO: ${description}"
        ],
        "description": "To Do (// TODO: ...) - iOS Snippets",
        "prefix": "todo"
    }
}
